#!/bin/bash -eu

json_key_exists ()
{
    local key=$1; shift
    local exists=`echo $@| jq "has(\"$key\")"`
    [[ $exists == true ]] || return 1
    return 0
}

os_curl ()
{
    local url=$1
    shift
    local cacert_arg=
    if [[ -n ${OS_CACERT:-""} ]] ; then
        cacert_arg="--cacert $OS_CACERT"
    fi
    curl "$cacert_arg" -s -H "X-Auth-Token: $OS_TOKEN" "$@" "$url"
}

get_endpoint ()
{
    local name=$1
    local svcs=
    local svc=
    local eps=
    local ep=

    svcs=`os_curl $AUTH_URL/services`
    if json_key_exists error $svcs; then
        svcs=`os_curl $AUTH_URL/OS-KSADM/services`
    fi

    for key in services OS-KSADM:services; do
        if json_key_exists $key $svcs; then
            svc=`echo "$svcs"| jq -r ".$key[]| select(.name==\"$name\")| .id"`
            break
        fi
    done

    eps=`os_curl $AUTH_URL/endpoints`
    for interface in admin internal public; do
        url=`echo "$eps"| jq -r ".endpoints[]| select(.service_id==\"$svc\")| select(.interface==\"$interface\")| .url"`
        [ -z "$url" ] || break
    done

    echo $url
}

if [ -z "${OS_AUTH_URL:-}" ]; then
    read -p "Path to credentials file: " openrc_path
    if ! [ -e "$openrc_path" ]; then
        echo "ERROR: invalid path to credentials file"
        exit 1
    fi
    source $openrc_path
fi

get_token ()
{
    # Allow token to be provided, first by cli --token, then env
    while (($#)); do
        if [[ $1 == --token ]]; then
            echo $2
            return
        fi
        shift
    done
    if [[ -n ${OS_TOKEN:-} ]]; then
        echo $OS_TOKEN
        return
    fi
    openstack token issue| awk '$2=="id" {print $4}'
}

echo "INFO: fetching token"
OS_TOKEN=`get_token $@`
AUTH_URL=`echo $OS_AUTH_URL| sed 's/5000/35357/g'`
NEUTRON_EP=`get_endpoint neutron`
NOVA_EP=`get_endpoint nova`
OCTAVIA_EP=`get_endpoint octavia`

#### NOVA ######################################################################

openstack_server_list_long () 
{
    # use markers to ensure we get the full list of instances and not capped at the the api max (1000)
    local marker=${1:-""}
    local new_marker=
    local output_tmp=`mktemp`

    if [[ -z "$marker" ]]; then
        os_curl "$NOVA_EP/servers/detail?all_tenants=True" -H "X-OpenStack-Nova-API-Version: 2.40" | tee $output_tmp
    else
        os_curl "$NOVA_EP/servers/detail?all_tenants=True&marker=$marker" -H "X-OpenStack-Nova-API-Version: 2.40" | tee $output_tmp
    fi

    new_marker=`jq -r .servers[].id $output_tmp| tail -n 1`
    rm $output_tmp
    if [[ -z $new_marker ]] || [[ $marker == $new_marker ]]; then
        return
    fi

    openstack_server_list_long $new_marker
}

openstack_server_list () 
{
    openstack_server_list_long| jq -r .servers[].id
}

openstack_compute_service_list ()
{
    os_curl $NOVA_EP/os-services
}


#### NEUTRON ###################################################################

openstack_network_agent_list ()
{
    os_curl $NEUTRON_EP/v2.0/agents
}

openstack_port_list ()
{
    local device_id=${1:-""}

    if [[ -n $device_id ]]; then
        os_curl $NEUTRON_EP/v2.0/ports?device_id=$device_id
    else
        os_curl $NEUTRON_EP/v2.0/ports
    fi
}

openstack_router_list ()
{
    local router_id=${1:-""}
    
    if [[ -n $router_id ]]; then
        os_curl $NEUTRON_EP/v2.0/routers?id=$router_id
    else
        os_curl $NEUTRON_EP/v2.0/routers
    fi
}

openstack_router_show ()
{
    local router_id=$1
    os_curl $NEUTRON_EP/v2.0/routers/$router_id
}

openstack_router_l3agent_list ()
{
    local router_id=$1
    os_curl $NEUTRON_EP/v2.0/routers/$router_id/l3-agents
}

openstack_port_show ()
{
    local uuid=$1
    os_curl $NEUTRON_EP/v2.0/ports/$uuid
}

openstack_network_show ()
{
    local uuid=$1
    os_curl $NEUTRON_EP/v2.0/networks/$uuid
}

openstack_subnet_show ()
{
    local uuid=$1
    os_curl $NEUTRON_EP/v2.0/subnets/$uuid
}

openstack_security_group_rule_list ()
{
    local uuid=${1:-}
    if [[ -n "$uuid" ]]; then
        os_curl $NEUTRON_EP/v2.0/security-group-rules?security_group_id=$uuid
        return
    fi
    os_curl $NEUTRON_EP/v2.0/security-group-rules
}

openstack_security_group_rule_show ()
{
    local uuid=$1
    os_curl $NEUTRON_EP/v2.0/security-group-rules/$uuid
}


#### OCTAVIA ###################################################################

openstack_loadbalancer_list ()
{
    os_curl $OCTAVIA_EP/v2.0/lbaas/loadbalancers
}

openstack_loadbalancer_show ()
{
    local uuid=${1:-}
    os_curl $OCTAVIA_EP/v2.0/lbaas/loadbalancers/$uuid
}

openstack_loadbalancer_pool_list ()
{
    local loadbalancer=${1:-}
    if [[ -n "$loadbalancer" ]]; then
        os_curl $OCTAVIA_EP/v2.0/lbaas/pools?loadbalancer_id=$loadbalancer
        return
    fi
    os_curl $OCTAVIA_EP/v2.0/lbaas/pools
}

openstack_loadbalancer_listener_list ()
{
    local loadbalancer=${1:-}
    if [[ -n "$loadbalancer" ]]; then
        os_curl $OCTAVIA_EP/v2.0/lbaas/listeners?loadbalancer_id=$loadbalancer
        return        
    fi
    os_curl $OCTAVIA_EP/v2.0/lbaas/listeners
}

openstack_loadbalancer_healthmonitor_list ()
{
    os_curl $OCTAVIA_EP/v2.0/lbaas/healthmonitors
}

openstack_loadbalancer_member_list ()
{
    local pool=$1
    os_curl $OCTAVIA_EP/v2.0/lbaas/pools/$pool/members
}

openstack_loadbalancer_listener_show ()
{
    local uuid=$1
    os_curl $OCTAVIA_EP/v2.0/lbaas/listeners/$uuid
}

openstack_loadbalancer_member_show ()
{
    local uuid=$1
    os_curl $OCTAVIA_EP/v2.0/lbaas/members/$uuid
}

