#!/bin/bash -u
#
# Display tree representation of a loadbalancer, its associated resources and
# any health monitor resources and state associated with them.
#
$DEBUG && set -x

.  `dirname $0`/utils.sh

mkdir $SCRATCH_AREA/map

get_healthmonitor_info ()
{
    local pool_hm_id=$1
    local pool_path="$2"

    if [[ $pool_hm_id == null ]] || [[ -d $SCRATCH_AREA/map/healthmonitors/$pool_hm_id ]]; then
        return
    fi

    hm="`jq -r \".healthmonitors[]| select(.id==\\\"$pool_hm_id\\\")\" $SCRATCH_AREA/healthmonitors.json`"
    if [[ -n "$hm" ]]; then
        mkdir -p $SCRATCH_AREA/map/healthmonitors/$pool_hm_id
        declare -a hm_keys=(
            operating_status
            timeout
            type
            url_path
            max_retries
            admin_state_up
            delay
            expected_codes
            http_method
        )
        for key in ${hm_keys[@]}; do
            value=`echo $hm| jq -r ".$key"`
            mkdir -p $SCRATCH_AREA/map/healthmonitors/$pool_hm_id/$key/$value
        done
        ln -s ../../../../healthmonitors/$pool_hm_id $pool_path/healthmonitor_id
    fi
}

# Run checks
echo "INFO: create monitor map for loadbalancer(s) '`cat $SCRATCH_AREA/loadbalancer_list| tr -s '\n' ' '| sed -r 's/\s+$//g'`'"
while read -r lb; do
    openstack_loadbalancer_show $lb > $SCRATCH_AREA/loadbalancers/$lb/show
    status="`jq -r \".loadbalancer.operating_status\" $SCRATCH_AREA/loadbalancers/$lb/show`"

    map_lb_path=$SCRATCH_AREA/map/loadbalancers/$lb
    mkdir -p ${map_lb_path}/{operating_status,listeners}
    touch ${map_lb_path}/operating_status/$status

    for listener in `ls $SCRATCH_AREA/loadbalancers/$lb/listeners`; do
        mkdir -p ${map_lb_path}/listeners/$listener/operating_status
        status="`cat $SCRATCH_AREA/loadbalancers/$lb/listeners/$listener/operating_status`"
        touch ${map_lb_path}/listeners/$listener/operating_status/$status
    done

    for pool in `ls $SCRATCH_AREA/loadbalancers/$lb/pools`; do
        pool_path=${map_lb_path}/pools/$pool
        mkdir -p ${pool_path}/protocol
        protocol=`jq -r ".pools[]| select(.id==\"$pool\")| .protocol" $SCRATCH_AREA/pools.json`
        touch $pool_path/protocol/$protocol

        pool_hm_id=`jq -r ".pools[]| select(.id==\"$pool\")| .healthmonitor_id" $SCRATCH_AREA/pools.json`
        get_healthmonitor_info "$pool_hm_id" "$pool_path"

        for member_uuid in `ls $SCRATCH_AREA/loadbalancers/$lb/pools/$pool/members`; do
            # https://docs.openstack.org/api-ref/load-balancer/v2/?expanded=list-pools-detail,show-member-details-detail#op-status
            member="`jq -r \".members[]| select(.id==\\\"$member_uuid\\\")\" $SCRATCH_AREA/loadbalancers/$lb/pools/$pool/members.json`"
            if [[ -z $member ]]; then
                echo "WARNING: failed to retrieve info for member $member_uuid"
                continue
            fi
            mkdir -p ${map_lb_path}/pools/$pool/members/$member_uuid
            operating_status=`echo $member| jq -r '.operating_status'`
            mkdir -p ${map_lb_path}/pools/$pool/members/$member_uuid/operating_status
            touch ${map_lb_path}/pools/$pool/members/$member_uuid/operating_status/$operating_status
            monitor_address=`echo $member| jq -r '.monitor_address'`
            monitor_port=`echo $member| jq -r '.monitor_port'`
            # if ^^ are null the member defaults to use the following:
            member_address=`echo $member| jq -r '.address'`
            member_port=`echo $member| jq -r '.protocol_port'`
            mkdir -p ${map_lb_path}/pools/$pool/members/$member_uuid/{address,port,monitor_address,monitor_port}
            # null means use member address
            touch ${map_lb_path}/pools/$pool/members/$member_uuid/monitor_address/$monitor_address
            touch ${map_lb_path}/pools/$pool/members/$member_uuid/monitor_port/$monitor_port
            touch ${map_lb_path}/pools/$pool/members/$member_uuid/address/$member_address
            touch ${map_lb_path}/pools/$pool/members/$member_uuid/port/$member_port
        done
    done
done < $SCRATCH_AREA/loadbalancer_list

echo ""
tree $SCRATCH_AREA/map
